// <auto-generated />
using System;
using EVF.DAL.DataConnection.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVF.DAL.Migrations.Identity
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20240221091915_CreateNewUser")]
    partial class CreateNewUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EVF.DAL.Entity.EVF.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"));

                    b.Property<string>("CodeSap")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CodeSAP");

                    b.Property<string>("Isopays")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("ISOPays");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdClient");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("EVF.DAL.Entity.EVF.Personnel", b =>
                {
                    b.Property<int>("IdPersonnel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersonnel"));

                    b.Property<string>("CodeSap")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("CodeSAP");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<int?>("IdSociete")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdPersonnel");

                    b.HasIndex("IdSociete");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("EVF.DAL.Entity.EVF.Societe", b =>
                {
                    b.Property<int>("IdSociete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSociete"));

                    b.Property<string>("CodeLangue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CodeSociete")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("NomSociete")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OrgCommerciale")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdSociete");

                    b.ToTable("Societe");
                });

            modelBuilder.Entity("EVF.DAL.Entity.EVF.SocieteClient", b =>
                {
                    b.Property<int>("IdSociete")
                        .HasColumnType("int");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdCommercial")
                        .HasColumnType("int");

                    b.Property<int>("IdAssistantCommercial")
                        .HasColumnType("int");

                    b.HasKey("IdSociete", "IdClient", "IdCommercial", "IdAssistantCommercial");

                    b.HasIndex("IdAssistantCommercial");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdCommercial");

                    b.ToTable("SocieteClient");
                });

            modelBuilder.Entity("EVF.DAL.Entity.Identity.Parametrage", b =>
                {
                    b.Property<int>("IdParametrage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParametrage"));

                    b.Property<string>("IdAspUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LangueBD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdParametrage");

                    b.HasIndex("IdAspUser")
                        .IsUnique();

                    b.ToTable("Parametrage");
                });

            modelBuilder.Entity("EVF.DAL.Entity.Identity.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPersonnel")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdPersonnel");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "52cb545b-0d32-48e6-a658-581d6063a3be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f413934f-6305-44d4-bc21-a2953177c58b",
                            Email = "moni@gmail.com",
                            EmailConfirmed = false,
                            IdPersonnel = 4,
                            LockoutEnabled = false,
                            NormalizedEmail = "MONI@GMAIL.COM",
                            NormalizedUserName = "MONICA00",
                            PasswordHash = "AQAAAAIAAYagAAAAEFD29r1htdzNxxI4PeACzY61hkw102eWwJbrBGLdLlnxd7L3nru5wyo45ZVm2gz6pA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3dd24e85-6895-491c-af73-407bc3698d9c",
                            TwoFactorEnabled = false,
                            UserName = "MONICA00"
                        },
                        new
                        {
                            Id = "8bdb6ec9-bc56-4b0b-ae94-760bddcb52eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cbe2124-135c-4401-81df-0e0d5ee1ca76",
                            Email = "arii@yahoo.com",
                            EmailConfirmed = false,
                            IdPersonnel = 10,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARII@YAHOO.COM",
                            NormalizedUserName = "ARIA01",
                            PasswordHash = "AQAAAAIAAYagAAAAEOYZP2SQPyGR2wg3Hf/nuUZVYmiKaDDbcK9nm7Zd6bYdFmhqydm9eOGmnnjNjbwpuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13a76623-4c56-4c2f-92a0-232ef73e772f",
                            TwoFactorEnabled = false,
                            UserName = "ARIA01"
                        },
                        new
                        {
                            Id = "b3a98629-23dc-448d-b0f3-a6630a0b7b95",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3238399-6df2-4d04-9e68-ffd26c5e1e96",
                            Email = "BesnardFab@gmail.com",
                            EmailConfirmed = false,
                            IdPersonnel = 33,
                            LockoutEnabled = false,
                            NormalizedEmail = "BESNARDFAB@GMAIL.COM",
                            NormalizedUserName = "BESNARDFAB",
                            PasswordHash = "AQAAAAIAAYagAAAAED1MjbTsfPJ6gQVJgVHM0KqpRnyAFHVlBdzjsCgCW6oLMW+jKl1RMprCXdTCapk+2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64f3e43f-9f9b-4ceb-8207-578667817706",
                            TwoFactorEnabled = false,
                            UserName = "BESNARDFAB"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Commercial",
                            NormalizedName = "CO"
                        },
                        new
                        {
                            Id = "2",
                            Name = "AssistantCommercial",
                            NormalizedName = "AC"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Administrateur",
                            NormalizedName = "ADM"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "52cb545b-0d32-48e6-a658-581d6063a3be",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "8bdb6ec9-bc56-4b0b-ae94-760bddcb52eb",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "b3a98629-23dc-448d-b0f3-a6630a0b7b95",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EVF.DAL.Entity.EVF.Personnel", b =>
                {
                    b.HasOne("EVF.DAL.Entity.EVF.Societe", "IdSocieteNavigation")
                        .WithMany("Personnel")
                        .HasForeignKey("IdSociete");

                    b.Navigation("IdSocieteNavigation");
                });

            modelBuilder.Entity("EVF.DAL.Entity.EVF.SocieteClient", b =>
                {
                    b.HasOne("EVF.DAL.Entity.EVF.Personnel", "IdAssistantCommercialNavigation")
                        .WithMany("SocieteClientIdAssistantCommercialNavigations")
                        .HasForeignKey("IdAssistantCommercial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVF.DAL.Entity.EVF.Client", "IdClientNavigation")
                        .WithMany("SocieteClients")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVF.DAL.Entity.EVF.Personnel", "IdCommercialNavigation")
                        .WithMany("SocieteClientIdCommercialNavigations")
                        .HasForeignKey("IdCommercial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVF.DAL.Entity.EVF.Societe", "IdSocieteNavigation")
                        .WithMany("SocieteClients")
                        .HasForeignKey("IdSociete")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAssistantCommercialNavigation");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdCommercialNavigation");

                    b.Navigation("IdSocieteNavigation");
                });

            modelBuilder.Entity("EVF.DAL.Entity.Identity.Parametrage", b =>
                {
                    b.HasOne("EVF.DAL.Entity.Identity.UserInfo", "UserInfoNav")
                        .WithOne("ParametrageNav")
                        .HasForeignKey("EVF.DAL.Entity.Identity.Parametrage", "IdAspUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfoNav");
                });

            modelBuilder.Entity("EVF.DAL.Entity.Identity.UserInfo", b =>
                {
                    b.HasOne("EVF.DAL.Entity.EVF.Personnel", "PersonnelNav")
                        .WithMany()
                        .HasForeignKey("IdPersonnel");

                    b.Navigation("PersonnelNav");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EVF.DAL.Entity.Identity.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EVF.DAL.Entity.Identity.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVF.DAL.Entity.Identity.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EVF.DAL.Entity.Identity.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EVF.DAL.Entity.EVF.Client", b =>
                {
                    b.Navigation("SocieteClients");
                });

            modelBuilder.Entity("EVF.DAL.Entity.EVF.Personnel", b =>
                {
                    b.Navigation("SocieteClientIdAssistantCommercialNavigations");

                    b.Navigation("SocieteClientIdCommercialNavigations");
                });

            modelBuilder.Entity("EVF.DAL.Entity.EVF.Societe", b =>
                {
                    b.Navigation("Personnel");

                    b.Navigation("SocieteClients");
                });

            modelBuilder.Entity("EVF.DAL.Entity.Identity.UserInfo", b =>
                {
                    b.Navigation("ParametrageNav")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
